generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(cuid())
  userName String
  email    String @unique
  password String
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  gradeId     String?
  assignments Assignment[]
  attendance  Attendance[]
  classroom   Classroom[]
  exams       Exam[]
  results     Result[]
  timetables  Timetable[]
  grade       Grade?       @relation(fields: [gradeId], references: [id])
  students    Student[]   
  teachers    Teacher[]    
}


model Student {
  id           String       @id @default(cuid())
  username     String       @unique
  email        String       @unique
  password     String
  age          Int
  address      String
  phoneNumber  String       @unique
  firstName    String
  lastName     String
  image        String?
  sex          Usersex
  createdAt    DateTime     @default(now())
  parentId     String?
  departmentId String
  gradeId      String?
  attendance   Attendance[]
  matricule    String       @unique
  fees         Fee[]
  results      Result[]
  department   Department   @relation(fields: [departmentId], references: [id])
  grade        Grade?       @relation(fields: [gradeId], references: [id])
  parent       Parent?      @relation(fields: [parentId], references: [id])
  courses      Subject[]    

}

model Teacher {
  id          String    @id @default(cuid())
  username    String    @unique
  email       String    @unique
  password    String
  age         Int
  address     String
  bloodGroup  String?
  phoneNumber String    @unique
  firstName   String
  sex         Usersex
  lastName    String
  image       String?
  teachersId  String    @unique
  courses     Subject[]
}

model Parent {
  id          String    @id @default(cuid())
  username    String    @unique
  email       String    @unique
  password    String
  age         Int
  sex         Usersex
  address     String
  phoneNumber String    @unique
  firstName   String
  lastName    String
  students    Student[]
}

model Grade {
  id       String    @id @default(cuid())
  name     String    @unique
  students Student[]
  courses  Subject[]
}

model Department {
  id            String         @id @default(cuid())
  name          String         @unique
  supervisorId  String
  announcements Announcement[]
  events        Event[]
  Student       Student[]
}

model Classroom {
  id       String  @id @default(cuid())
  name     String  @unique
  courseId Int
  course   Subject @relation(fields: [courseId], references: [id])
}

model Event {
  id           String      @id @default(cuid())
  name         String      @unique
  startDate    DateTime
  endDate      DateTime
  description  String
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  title     String
  startDate DateTime
  endDate   DateTime
  courseId  Int
  course    Subject  @relation(fields: [courseId], references: [id])
  results   Result[]
}

model Attendance {
  id        Int      @id @default(autoincrement())
  present   Boolean
  date      DateTime
  status    String
  courseId  Int
  studentId String
  course    Subject  @relation(fields: [courseId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  courseId  Int
  course    Subject  @relation(fields: [courseId], references: [id])
}

model Result {
  id        Int      @id @default(autoincrement())
  marks     Float
  grade     String
  date      DateTime
  studentId String
  courseId  Int
  examId    Int?
  course    Subject  @relation(fields: [courseId], references: [id])
  exam      Exam?    @relation(fields: [examId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Timetable {
  id        String   @id @default(cuid())
  courseId  Int
  startTime DateTime
  endTime   DateTime
  day       String
  course    Subject  @relation(fields: [courseId], references: [id])
}

model Notification {
  id      String   @id @default(cuid())
  title   String
  message String
  date    DateTime
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  message    String
  date       DateTime
}

model Fee {
  id        String   @id @default(cuid())
  studentId String
  amount    Float
  dueDate   DateTime
  status    String
  student   Student  @relation(fields: [studentId], references: [id])
}

model Announcement {
  id           String      @id @default(cuid())
  title        String
  message      String
  date         DateTime
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
}

enum Usersex {
  Male
  Female
}
